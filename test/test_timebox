#!/bin/sh

# Timebox Tests.

# The MIT License (MIT)
#
# Copyright (c) 2013-2016 Susam Pal
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Test home directory where configuration file is read from and log file
# is written to.
HOME=$TWORK


# Newline character.
NL="
"

# Bell character.
BELL=$(printf "\a")


# Test helper function to display bell characters as "<BELL>"
show_bell()
{
    sed "s/$BELL/<BELL>\\$NL/g"
}


# Test helper function that removes bell characters.
hide_bell()
{
    sed "s/$BELL//g"
}


# Test helper function that replaces time field with "TIME".
norm_time()
{
    sed 's/[0-2][0-9]:[0-5][0-9]:[0-5][0-9]/TIME/'
}


# Help output contains usage line.
test_help()
{
    for opt in -h --help
    do
        main $opt | head -n 1 | grep -q "^Usage:" || return 1
    done
}


# Version output contains version.
test_version()
{
    for opt in -v --version
    do
        main $opt | head -n 1 | grep -q "Timebox $VERSION" || return 1
    done
}


# Unknown option leads to error.
test_unknown_option()
{
    main -x 2>&1 | grep -q '^.*: Unknown option "-x"\.$' || return 1
    main --xyz 2>&1 | grep -q '^.*: Unknown option "--xyz"\.$' || return 1
}



# Surplus argument leads to error.
test_surplus_argument()
{
    main 10 20 2>&1 | grep -q '^.*: Surplus argument "20"\.$'
}


# Option -m must be followed by an integer.
test_m_option_missing_argument()
{
    main -m 2>&1 | grep -q '^.*: "-m" must be followed by an integer\.$'
}


# Test dedication.
test_qtpi()
{
    main --qtpi | grep -q 'For Sunaina, for all time'
}


# When no arguments are specified, timebox defaults to 30 minutes.
test_default_duration()
{
    unset MSG_COMMANDS

    main -m 0 | norm_time | hide_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox30.out"
}


# Test duration argument.
test_good_duration()
{
    unset MSG_COMMANDS
    main -m 0 15 | norm_time | hide_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox15.out"
}


# Duration argument must be made entirely of digits.
test_bad_duration()
{
    main 10foo 2>&1 | grep -q '^.*: Bad duration: "10foo"\.$' || return 1
    main 0 2>&1 | grep -q '^.*: Bad duration: "0"\.$' || return 1
}


# Duration that exceeds 9 digits is an error.
test_large_duration()
{
    main 1000000000 2>&1 | grep -q '^.*: Bad duration: "1000000000"\.$'
}


# Duration cannot be 0.
test_zero_duration()
{
    main 0 2>&1 | grep -q '^.*: Bad duration: "0"\.$'
}


# When timebox ends, a command to display dialog box on desktop is
# invoked.
test_desktop_msg()
{
    MSG_COMMANDS='echo msg: "$msg"'
    main -m 0 | hide_bell |
    grep -q "^msg: :-)    :-)    :-)    :-)    :-)$"
}


# When timebox ends, the commands specified in MSG_COMMANDS must be
# tried one by one until one succeeds in order to display a message on
# the desktop.
test_desktop_msg_loop()
{
    MSG_COMMANDS="$(cat <<eof
echo msg1; false
echo msg2; false
echo msg3: "\$msg"
echo msg4: "\$msg"
eof
)"

    main -m 0 | norm_time | hide_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-msg.out"
}


# Test that a log is written to log file at the end of a timebox.
test_end_log()
{
    unset MSG_COMMANDS
    main -m 0 > /dev/null
    grep -q "^....-..-.. ..:..:.. - 30$" "$LOG_FILE"
}


# Test output and beeps for default duration.
test_duration_default()
{
    unset MSG_COMMANDS
    main -m 0 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-duration-default.out"
}


# Test output and beeps for default duration.
test_duration_16()
{
    unset MSG_COMMANDS
    main -m 0 16 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-duration-16.out"
}


# Test output and beeps for default duration.
test_duration_15()
{
    unset MSG_COMMANDS
    main -m 0 15 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-duration-15.out"
}


# Test output and beeps for default duration.
test_duration_6()
{
    unset MSG_COMMANDS
    main -m 0 6 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-duration-6.out"
}


# Test output and beeps for default duration.
test_duration_5()
{
    unset MSG_COMMANDS
    main -m 0 5 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-duration-5.out"
}


# Test output and beeps for default duration.
test_duration_1()
{
    unset MSG_COMMANDS
    main -m 0 1 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-duration-1.out"
}

# Test configuration option: quiet.
test_conf_quiet()
{
    unset MSG_COMMANDS
    echo quiet > "$TWORK/.timeboxrc"
    main -m 0 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-conf-quiet.out"
}

# Test configuration option: quiet.
test_conf_sober()
{
    MSG_COMMANDS='echo msg: "$msg"'
    echo sober > $TWORK/.timeboxrc
    main -m 0 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-conf-sober.out"
}

# Test configuration: qtpi.
test_conf_qtpi()
{
    MSG_COMMANDS='echo msg: "$msg"'
    echo qtpi > $TWORK/.timeboxrc
    main -m 0 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-conf-qtpi.out"
}

# Test multiple configurations.
test_conf_multi()
{
    MSG_COMMANDS='echo msg: "$msg"'

    echo quiet sober > $TWORK/.timeboxrc
    main -m 0 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-conf-multi.out" || return 1

    echo quiet > $TWORK/.timeboxrc
    echo sober >> $TWORK/.timeboxrc
    main -m 0 | norm_time | show_bell > "$TWORK/timebox.out"
    diff -u "$TWORK/timebox.out" "$TDATA/timebox-conf-multi.out" || return 1
}
